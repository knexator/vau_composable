#launch {
	0 -> #compileMap: ((#france . #paris) (#spain . #madrid) (#italy . #rome)) {
		compiled -> #interpreter: (#spain #asdf (#asdf . compiled)) {
			1 -> #equal?: (#madrid . 1);
		}
	}
	0 -> #interpreter: (#spain #myMap (
		#myMap . (
			(
				(#atom . #france)
				(#atom . #identity)
				(#atom . #paris) . #return)
			(
				(#atom . #spain)
				(#atom . #identity)
				(#atom . #madrid) . #return)
			(
				(#atom . #italy)
				(#atom . #identity)
				(#atom . #rome) . #return)
		))) 
	{
		1 -> #equal?: (#madrid . 1);
	}
	0 -> #interpreter: ((#input #f1 #output) #bubbleUpF1 (
		#bubbleUpF1 . (
			(
				((#atom . #f1) . (#variable . #v2))
				(#atom . #identity)
				((#atom . #f1) . (#variable . #v2)) . #return)
			(
				((#variable . #v1) . (#variable . #v2))
				(#atom . #bubbleUpF1)
				(#variable . #v2)
				(
					((#atom . #f1) . (#variable . #v3))
					(#atom . #identity)
					((#atom . #f1) . ((#variable . #v1) . (#variable . #v3))) . #return))
		))) 
	{
		1 -> #equal?: ((#f1 #input #output) . 1);
	}
	0 -> #interpreter: ((#input #f1 #output) #bubbleUpF1 (#bubbleUpF1 (((#atom . #f1) . (#variable . #v2)) . ((#atom . #identity) . (((#atom . #f1) . (#variable . #v2)) . #return))) (((#variable . #v1) . (#variable . #v2)) (#atom . #bubbleUpF1) (#variable . #v2) (((#atom . #f1) . (#variable . #v3)) . ((#atom . #identity) . (((#atom . #f1) . ((#variable . #v1) . (#variable . #v3))) . #return))))));
	0 -> (#math . (#peano . #inc)): 0 {
		1 -> (#math . (#peano . #inc)): 1;
	}
	(#true 0 #true) -> #identity: 0 {
		1 -> #identity: 1 {
			2 -> #identity: 2;
			2 -> #identity: 2;
		}
		1 -> #identity: (0 . 1) {
			2 -> #identity: 2;
			2 -> #identity: 2;
		}
	}
	0 -> #identity: 0;
	(#true . 4) -> #reverse: (#v3 #input) {
		0 -> #identity: 0;
	}
	0 -> #parseSexpr: (#< #a #DOT #< #a #DOT #b #> #>);
	0 -> #map: ((#math . (#peano . #toBinary)) (#true) (#true #true));
	2 -> #identity: ((#math . (#peano . #add)) (#true #true #true) #true #true #true) {
		(1 . 0) -> 1: 0;
	}
	X -> #identity: ((((#atom . #true) . (#variable . #v1)) . (#variable . #v2)) . ((#atom . #add) . (((#variable . #v1) . ((#atom . #true) . (#variable . #v2))) . #return)));
	X -> #applyVau: ((#input #f1) . (((#variable . #v1) . ((#atom . #f1) . (#variable . #v3))) . ((#atom . #f1) . ((#variable . #v1) . (#variable . #v3)))));
	X -> #reverseStackless: X;
	X -> (#brainfuck . #api): ((#, #[ #- #] #.) (#1 #1 #1));
	X -> (#math . (#binary . (#multiply . #simple))): ((#true #false #true) #true #false #true);
	X -> (#math . (#peano . #toBinary)): (#true #true #true #true #true);
	X -> (#math . (#binary . #toPeano)): (#true #false #true);
	X -> (#math . (#binary . #add)): ((#true #false) #true #true);
	X -> (#math . (#binary . #inc)): (#false #true) {
		0 -> (#math . (#binary . #inc)): 0 {
			3 -> (#math . (#binary . #inc)): 3;
		}
	}
	thing -> #bubbleUp: ((#true #false #true) #false #true);
}
#compileMap {
	#nil -> #identity: #nil;
	((key . val) . rest) -> #compileMap: rest {
		compiled_rest -> #identity: ( ( (#atom . key) . ( (#atom . #identity) . ( (#atom . val) . #return) ) ) . compiled_rest);
	}	
}
#bubbleUpF1 {
	(#f1 . rest) -> #identity: (#f1 . rest);
	(a . b) -> #bubbleUpF1: b {
		(#f1 . rest) -> #identity: (#f1 . (a . rest));
	}
}
#bubbleUpF1Fast {
	(first . (second . (#f1 . rest))) -> #identity: (#f1 . (first . (second . rest)));
	(first . (#f1 . rest)) -> #identity: (#f1 . (first . rest));
	(#f1 . rest) -> #identity: (#f1 . rest);
	(a . b) -> #bubbleUpF1Fast: b {
		(#f1 . rest) -> #identity: (#f1 . (a . rest));
	}
}
#equal? {
	((leftleft . leftright) . (rightleft . rightright)) -> #equal?: (leftleft . rightleft) {
		#false -> #identity: #false;
		#true -> #equal?: (leftright . rightright);
	}
	(left . right) -> #eqAtoms?: (left . right);
}
(#math . (#binary . #add)) {
	(N) -> #identity: N;
	(#nil . N) -> #identity: N;
	((#false . 0) . (1 . 3)) -> (#math . (#binary . #add)): (0 . 3) {
		X -> #identity: (1 . X);
	}
	((1 . 3) . (#false . 0)) -> (#math . (#binary . #add)): (0 . 3) {
		X -> #identity: (1 . X);
	}
	((#true . 0) . (#true . 1)) -> (#math . (#binary . #inc)): 0 {
		X -> (#math . (#binary . #add)): (X . 1) {
			7 -> #identity: (#false . 7);
		}
	}
}
(#math . (#binary . #inc)) {
	#nil -> #identity: (#true);
	(#false . 0) -> #identity: (#true . 0);
	(#true . 0) -> (#math . (#binary . #inc)): 0 {
		X -> #identity: (#false . X);
	}
}
(#math . (#binary . #toPeano)) {
	#nil -> #identity: #nil;
	(#false . rest) -> (#math . (#binary . #toPeano)): rest {
		2 -> (#math . (#peano . #add)): (2 . 2);
	}
	(#true . rest) -> (#math . (#binary . #toPeano)): rest {
		2 -> (#math . (#peano . #add)): (2 . 2) {
			X -> #identity: (#true . X);
		}
	}
}
(#math . (#peano . #add)) {
	(#nil . other) -> #identity: other;
	((#true . 2) . other) -> (#math . (#peano . #add)): (2 . (#true . other));
}
(#math . (#peano . #toBinary)) {
	#nil -> #identity: #nil;
	(#true . (#true . (#true . (#true . rest)))) -> (#math . (#peano . #toBinary)): rest {
		X -> (#math . (#binary . #add)): ((#false #false #true) . X);
	}
	(#true . rest) -> (#math . (#peano . #toBinary)): rest {
		X -> (#math . (#binary . #inc)): X;
	}
}
(#math . (#binary . (#multiply . #simple))) {
	(#nil . other) -> #identity: #nil;
	((#false . X) . other) -> (#math . (#binary . (#multiply . #simple))): (X . other) {
		3 -> #identity: (#false . 3);
	}
	((#true . X) . other) -> (#math . (#binary . (#multiply . #simple))): (X . other) {
		3 -> (#math . (#binary . #add)): (other . (#false . 3));
	}
}
(#math . (#binary . (#multiply . #fast))) {
	(#nil . other) -> #identity: #nil;
	((#true) . other) -> #identity: other;
	((#false #true) . other) -> #identity: (#false . other);
	((#true #true) . other) -> (#math . (#binary . #add)): (other . (#false . other));
	((#false . X) . other) -> (#math . (#binary . (#multiply . #fast))): (X . other) {
		3 -> #identity: (#false . 3);
	}
	((#true . X) . other) -> (#math . (#binary . (#multiply . #fast))): (X . other) {
		3 -> (#math . (#binary . #add)): (other . (#false . 3));
	}
}
#getBindings {
	(0 . (#variable . 1)) -> #identity: ((1 . 0));
	(0 . (#atom . 1)) -> #eqAtoms?: (0 . 1) {
		#false -> #identity: #false;
		#true -> #identity: #nil;
	}
	((left . right) . (1 . 3)) -> #getBindings: (left . 1) {
		#false -> #identity: #false;
		7 -> #getBindings: (right . 3) {
			#false -> #identity: #false;
			6 -> #concat: (6 . 7);
		}
	}
	(0 . (1 . 3)) -> #identity: #false;
}
#concat {
	(#nil . X) -> #identity: X;
	((0 . 2) . 1) -> #concat: (2 . (0 . 1));
}
#applyVau {
	(0 . (1 . 2)) -> #getBindings: (0 . 1) {
		#false -> #identity: #false;
		3 -> #applyBindings: (2 . 3);
	}
}
#applyBindings {
	((#atom . 2) . 1) -> #identity: 2;
	((#variable . 2) . 1) -> #dictLookup: (2 . 1);
	((0 . 2) . 1) -> #applyBindings: (0 . 1) {
		3 -> #applyBindings: (2 . 1) {
			4 -> #identity: (3 . 4);
		}
	}
}
#dictLookup {
	(key . ((maybe_key . maybe_value) . rest)) -> #equal?: (key . maybe_key) {
		#true -> #identity: maybe_value;
		#false -> #dictLookup: (key . rest);
	}
}
#reverse {
	#nil -> #identity: #nil;
	(first . rest) -> #reverse: rest {
		reversed_rest -> #append: (first . reversed_rest);
	}
}
#append {
	(element) -> #identity: (element);
	(element . (first . rest)) -> #append: (element . rest) {
		done_rest -> #identity: (first . done_rest);
	}
}
(#brainfuck . #api) {
	(#nil . input) -> #identity: #nil;
	((program_first . program_rest) . input) -> (#brainfuck . #main): ((program_first program_rest) (#nil #nil) (input));
}
(#brainfuck . #main) {
	((program_cur . (#nil . program_prev)) (tape_cur . (tape_next . tape_prev)) (input . output)) -> #identity: program_cur {
		#< -> #reverse: output;
		#> -> #reverse: output;
		#+ -> #reverse: output;
		#- -> #reverse: output;
		#. -> #reverse: (tape_cur . output);
		#] -> #identity: tape_cur {
			#nil -> #reverse: output;
			_ -> #identity: program_prev {
				(program_prev_first . program_prev_rest) -> (#brainfuck . (#skip . #backward)): (#nil (program_prev_first . ((program_cur) . program_prev_rest)) (tape_cur . (tape_next . tape_prev)) (input . output));
			}
		}
	}
	((program_cur . ((program_next_first . program_next_rest) . program_prev)) (tape_cur . (tape_next . tape_prev)) (input . output)) -> #identity: program_cur {
		#< -> #identity: tape_prev {
			#nil -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (#nil (tape_cur . tape_next)) (input . output));
			(prev_first . prev_rest) -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (prev_first . ((tape_cur . tape_next) . prev_rest)) (input . output));
		}
		#> -> #identity: tape_next {
			#nil -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (#nil . (#nil . (tape_cur . tape_prev))) (input . output));
			(next_first . next_rest) -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (next_first . (next_rest . (tape_cur . tape_prev))) (input . output));
		}
		#+ -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) ((#1 . tape_cur) . (tape_next . tape_prev)) (input . output));
		#- -> #identity: tape_cur {
			(#1 . rest) -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (rest . (tape_next . tape_prev)) (input . output));
		}
		#, -> #identity: input {
			(first . rest) -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (first . (tape_next . tape_prev)) (rest . output));
			#nil -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (#nil . (tape_next . tape_prev)) (#nil . output));
		}
		#. -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (tape_cur . (tape_next . tape_prev)) (input . (tape_cur . output)));
		#[ -> #identity: tape_cur {
			#nil -> (#brainfuck . (#skip . #forward)): (#nil (program_next_first . (program_next_rest . (program_cur . program_prev))) (tape_cur . (tape_next . tape_prev)) (input . output));
			_ -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (tape_cur . (tape_next . tape_prev)) (input . output));
		}
		#] -> #identity: tape_cur {
			#nil -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (program_cur . program_prev))) (tape_cur . (tape_next . tape_prev)) (input . output));
			_ -> #identity: program_prev {
				(program_prev_first . program_prev_rest) -> (#brainfuck . (#skip . #backward)): (#nil (program_prev_first . ((program_cur . (program_next_first . program_next_rest)) . program_prev_rest)) (tape_cur . (tape_next . tape_prev)) (input . output));
			}
		}
	}
}
(#brainfuck . (#skip . #forward)) {
	(#nil (#] . ((program_next_first . program_next_rest) . program_prev)) tape io) -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (#] . program_prev))) tape io);
	((#1 . depth) (#] . ((program_next_first . program_next_rest) . program_prev)) tape io) -> (#brainfuck . (#skip . #forward)): (depth (program_next_first . (program_next_rest . (#] . program_prev))) tape io);
	(depth (#[ . ((program_next_first . program_next_rest) . program_prev)) tape io) -> (#brainfuck . (#skip . #forward)): ((#1 . depth) (program_next_first . (program_next_rest . (#[ . program_prev))) tape io);
	(depth (program_cur . ((program_next_first . program_next_rest) . program_prev)) tape io) -> (#brainfuck . (#skip . #forward)): (depth (program_next_first . (program_next_rest . (program_cur . program_prev))) tape io);
}
(#brainfuck . (#skip . #backward)) {
	(#nil (#[ . ((program_next_first . program_next_rest) . (program_prev_first . program_prev_rest))) tape io) -> (#brainfuck . #main): ((program_next_first . (program_next_rest . (#[ . (program_prev_first . program_prev_rest)))) tape io);
	((#1 . depth) (#[ . (program_next . (program_prev_first . program_prev_rest))) tape io) -> (#brainfuck . (#skip . #backward)): (depth (program_prev_first . ((#[ . program_next) . program_prev_rest)) tape io);
	(depth (#] . (program_next . (program_prev_first . program_prev_rest))) tape io) -> (#brainfuck . (#skip . #backward)): ((#1 . depth) (program_prev_first . ((#] . program_next) . program_prev_rest)) tape io);
	(depth (program_cur . (program_next . (program_prev_first . program_prev_rest))) tape io) -> (#brainfuck . (#skip . #backward)): (depth (program_prev_first . ((program_cur . program_next) . program_prev_rest)) tape io);
}
#reverseStackless {
	X -> (#reverseStackless . #helper): (#nil . X);
}
(#reverseStackless . #helper) {
	(0) -> #identity: 0;
	(0 . (1 . 2)) -> (#reverseStackless . #helper): ((1 . 0) . 2);
}
#interpreter {
	(input . (#identity . allFnks)) -> #identity: input;
	(input . (#eqAtoms? . allFnks)) -> #eqAtoms?: input;
	(input . (fnkName . allFnks)) -> #dictLookup: (fnkName . allFnks) {
		fnkDef -> (#interpreter . #applyCases): ((input . fnkDef) allFnks);
	}
}
(#interpreter . #applyCases) {
	((input . (first_case . rest_cases)) . (allFnks . parentBindings)) -> #identity: first_case {
		(pattern . (fnkNameTemplate . (template . rest))) -> #getBindings: (input . pattern) {
			#false -> (#interpreter . #applyCases): ((input . rest_cases) . (allFnks . parentBindings));
			localBindings -> #concat: (localBindings . parentBindings) {
				bindings -> #applyBindings: (template . bindings) {
					filledTemplate -> #applyBindings: (fnkNameTemplate . bindings) {
						fnkName -> #interpreter: (filledTemplate . (fnkName . allFnks)) {
							affectedTemplate -> #identity: rest {
								#return -> #identity: affectedTemplate;
								child_cases -> (#interpreter . #applyCases): ((affectedTemplate . child_cases) . (allFnks . bindings));
							}
						}
					}
				}
			}
		}
	}
}
(#math #peano #mult) {
	(#nil . 0) -> #identity: #nil;
	((#true) . 0) -> #identity: 0;
	((#true . 1) . 0) -> (#math #peano #mult): (1 . 0) {
		res -> (#math . (#peano . #add)): (0 . res);
	}
}
#map {
	(fn) -> #identity: #nil;
	(fn . (array_first . array_second)) -> fn: array_first {
		mapped -> #map: (fn . array_second) {
			rest -> #identity: (mapped . rest);
		}
	}
}
#parseSexpr {
	0 -> (#parseSexpr . #main): 0 {
		(result) -> #identity: result;
	}
}
(#parseSexpr . #main) {
	(#< . 1) -> (#parseSexpr . #main): 1 {
		(left . (#DOT . rest)) -> (#parseSexpr . #main): rest {
			(right . (#> . 5)) -> #identity: ((left . right) . 5);
		}
	}
	(0 . 3) -> #identity: (0 . 3);
}
(#math . (#peano . #inc)) {
	X -> #identity: (#true . X);
}