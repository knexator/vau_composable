// ideas for notation

equal?:
    ((a . b) . (x . y)) -> #equal?: (a . x)
        #false -> #quote: #false;
        #true -> #equal?: (b . y);
    ( a . x ) -> #eqAtoms?: (a . x);

equal?:
    ((A . B) . (X . Y)) -> equal?: (A . X)
        false -> quote: false;
        true -> equal?: (B . Y);
    ( A . X ) -> eqAtoms?: (A . X);

EQUAL?:
    ((a . b) . (x . y)) -> EQUAL?: (a . x)
        FALSE -> QUOTE: FALSE;
        TRUE -> EQUAL?: (b . y);
    ( a . x ) -> EQ-ATOMS?: (a . x);

equal?:
    ((@a . @b) . (@x . @y)) -> #equal?: (@a . @x)
        #false -> #quote: #false;
        #true -> #equal?: (b . y);
    ( @a . @x ) -> #eqAtoms?: (@a . @x);

equal?:
    ((@a . @b) . (@x . @y)) -> equal?: (@a . @x)
        false -> quote: false;
        true -> equal?: (b . y);
    ( @a . @x ) -> eqAtoms?: (@a . @x);

(equal? . (
    (((a . b) . (x . y))
        :equal? (a . x) (
            (:false
                :quote :false 
                    :return)
            (:true
                :equal? (b . y) 
                    :return)
        ))
    ((a . x)
        :eqAtoms? (a . x) :return)
))

equal? {
    ((a . b) . (x . y)) => #equal? (a . x) {
        #false -> #quote: #false;
        #true -> #equal?: (b . y);
    }
    ( a . x ) -> #eqAtoms?: (a . x);
}

match-with-deep-tree:
    ((#a . #b) ((#asdf #sdfsf #sfsdf) . variable)) -> #quote: #hola;
    (#(a . b) (#(asdf sdfsf sfsdf) . variable)) -> #quote: #hola;

#equal?:
    (
        (
            a . b
        ) . (
            x . y
        )
    ) -> #equal?: (a . 
        ((x)))
        #false -> #quote: #false;
        #true -> (
            #precompiled . #equal?
        ): (b . y);
    ( a . x ) -> #eqAtoms?: (a . x);

equal? {
    ((a . b) . (x . y)) -> #equal?: (a . x) {
        #false -> #quote: #false;
        #true -> #equal?: (b . y);
    }
    ( a . x ) -> #eqAtoms?: (a . x);
}

generate_bindings {
    ( value . pattern ) -> #quote: pattern {
        (#var . x) -> #quote: ((x . value) . #nil);
        (#atom . x) -> #eqAtoms?: (x . value) {
            #false -> #quote: #false;
            #true -> #quote: #nil;
        }
        (left_pattern . right_pattern) -> #quote: value {
            (left_value . right_value) -> generate_bindings: (left_value . left_pattern) {
                #false -> #quote: #false;
                left_bindings -> generate_bindings: (right_value . right_pattern) {
                    #false -> #quote: #false;
                    right_bindings -> #merge: (left_bindings . right_bindings);
                }
            }
            single_value -> #quote: #false;
        }
    }
}
